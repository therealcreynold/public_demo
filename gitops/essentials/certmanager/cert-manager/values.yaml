acmesolver:
  image:
    repository: quay.io/jetstack/cert-manager-acmesolver
affinity: {}
cainjector:
  affinity: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  enabled: true
  extraArgs: null
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/jetstack/cert-manager-cainjector
  nodeSelector:
    kubernetes.io/os: linux
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  podLabels: {}
  replicaCount: 1
  resources: {}
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  serviceAccount:
    automountServiceAccountToken: true
    create: true
  strategy: {}
  tolerations: null
  topologySpreadConstraints: null
  volumeMounts: null
  volumes: null
clusterResourceNamespace: ''
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
dns01RecursiveNameservers: '8.8.8.8:53,1.1.1.1:53'
dns01RecursiveNameserversOnly: true
enableCertificateOwnerRef: false
extraArgs: null
extraEnv: null
featureGates: ''
global:
  commonLabels: {}
  imagePullSecrets: null
  leaderElection:
    namespace: kube-system
  logLevel: 2
  podSecurityPolicy:
    enabled: false
    useAppArmor: true
  priorityClassName: ''
  rbac:
    aggregateClusterRoles: true
    create: true
image:
  pullPolicy: IfNotPresent
  repository: quay.io/jetstack/cert-manager-controller
ingressShim: {}
installCRDs: true
livenessProbe:
  enabled: false
  failureThreshold: 8
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 15
maxConcurrentChallenges: 60
namespace: 'cert-manager'
nodeSelector:
  kubernetes.io/os: linux
podDisruptionBudget:
  enabled: false
  minAvailable: 1
podLabels: {}
prometheus:
  enabled: true
  servicemonitor:
    annotations: {}
    enabled: false
    honorLabels: false
    interval: 60s
    labels: {}
    path: /metrics
    prometheusInstance: default
    scrapeTimeout: 30s
    targetPort: 9402
replicaCount: 1
resources: {}
securityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault
serviceAccount:
  automountServiceAccountToken: true
  create: true
startupapicheck:
  affinity: {}
  backoffLimit: 4
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  enabled: true
  extraArgs: null
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/jetstack/cert-manager-ctl
  jobAnnotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: '1'
  nodeSelector:
    kubernetes.io/os: linux
  podLabels: {}
  rbac:
    annotations:
      helm.sh/hook: post-install
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      helm.sh/hook-weight: '-5'
  resources: {}
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  serviceAccount:
    annotations:
      helm.sh/hook: post-install
      helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
      helm.sh/hook-weight: '-5'
    automountServiceAccountToken: true
    create: true
  timeout: 1m
  tolerations: null
  volumeMounts: null
  volumes: null
strategy: {}
tolerations: null
topologySpreadConstraints: null
volumeMounts: null
volumes: null
webhook:
  affinity: {}
  config: null
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
  extraArgs: null
  hostNetwork: false
  image:
    pullPolicy: IfNotPresent
    repository: quay.io/jetstack/cert-manager-webhook
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  networkPolicy:
    egress:
      - ports:
          - port: 80
            protocol: TCP
          - port: 443
            protocol: TCP
          - port: 53
            protocol: TCP
          - port: 53
            protocol: UDP
          - port: 6443
            protocol: TCP
        to:
          - ipBlock:
              cidr: 0.0.0.0/0
    enabled: false
    ingress:
      - from:
          - ipBlock:
              cidr: 0.0.0.0/0
  nodeSelector:
    kubernetes.io/os: linux
  podDisruptionBudget:
    enabled: false
    minAvailable: 1
  podLabels: {}
  readinessProbe:
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  replicaCount: 1
  resources: {}
  securePort: 10250
  securityContext:
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
  serviceAccount:
    automountServiceAccountToken: true
    create: true
  serviceLabels: {}
  serviceType: ClusterIP
  strategy: {}
  timeoutSeconds: 10
  tolerations: null
  topologySpreadConstraints: null
  url: {}
  volumeMounts: null
  volumes: null